#Python-snippets van Gertjan Laan, 20 maart 2020

snippet pr "print('xxx = ', xxx)" 
print(`!p snip.rv="'" + t[1] + " = '"`, $1)
$0
endsnippet


snippet prm "print matrix:"
print('$1')
print($1)
$0
endsnippet

snippet p "print()"
print()
$0
endsnippet


snippet f "functie niet in een klasse" b
def $1($2):
    $3

$0
endsnippet


snippet d "functie niet in een klasse" b
def $1($2):
    $3

$0
endsnippet


snippet cl "class definitie" b
class $1:
    '''$2'''
    ${3:Klassevariabelen}

    def __init__(self$4):
	    $5
$0
endsnippet

# Simpele klasse
snippet c "Simpele class definitie" b
class $1:

    def __init__(self$4):
	    $5
$0
endsnippet

snippet defi "def __init__(self)"
def __init__(self$1):
    $2

$0
endsnippet

# __repr__() is vergelijkbaar met toString() in Java
# __repr__() behoort alle info uit het object te bevatten
snippet defr "def __repr__(self)"  
def __repr__(self):
    $1

$0
endsnippet

# __str()__() is ook vergelijkbaar met toString() in Java
# __str__() hoeft niet alle info te bevatten, maar wel alles netjes geformateerd
# De uitvoer wordt gebruikt in print() en op de opdrachtregel als je de naam van een object intikt
# Is eventueel identiek aan __repr__()
snippet defs "def __str__(self)"
def __str__(self):
    $1

$0
endsnippet


# Methode / functie in een klasse
snippet def "def xxx(self)"
def ${1:methodenaam}(self$2):
    $3

$0
endsnippet


# TestCase
snippet tc "TestCase"
import unittest${1:,importmodule}

class Mijntest(unittest.TestCase):
    def test_${2:functienaam}(self):
       self.assert${3:asserFunctie}($1.$2(${4:parameters})$5)

    $0
endsnippet


# testfunctie
snippet tf "testfunctie"
def test_${1:functienaam}(self):
    self.assert${2:assertFunctie}(${3:module}.$1(${4:parameters})$5)
	
$0
endsnippet


#main
snippet main "main-functie" !b
def main():
    $1


if __name__ == '__main__':
    main()
endsnippet

